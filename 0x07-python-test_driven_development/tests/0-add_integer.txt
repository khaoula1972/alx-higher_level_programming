Using ``add_integer``
---------------------

First import ``add_integer`` from ``0-add_integer`` module:
        >>> add_integer = __import__('0-add_integer').add_integer

Now let's test it :

Adding 10 and 2
        >>> add_integer(10, 2)
        12

Adding positive and negative
        >>> add_integer(100, -2)
        98

Adding one argument
        >>> add_integer(2)
        100

Adding an integer to a string
	>>> add_integer(4, "School")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

Adding a None value
	>>> add_integer(None)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

Adding two chred numbers
	>>> add_integer('1', '5')
	Traceback (most recent call last):
                ...
        TypeError: a must be an integer

Adding a list
	>>> add_integer(4, [1])
	Traceback (most recent call last):
                ...
        TypeError: b must be an integer

Adding a tuple
	>>> add_integer(4, (4, 1))
	Traceback (most recent call last):
                ...
        TypeError: b must be an integer

Now, let's move to Overflow cases:

Case 1 Overflow
	>>> add_integer(4, float('inf'))
	Traceback (most recent call last):
                ...
        OverflowError: cannot convert float infinity to integer

Case 2 Overflow
	>>> add_integer(float('inf'), float('-inf'))
	Traceback (most recent call last):
                ...
	OverflowError: cannot convert float infinity to integer

Case 3 Nan
	>>> add_integer(float('Nan'), 4)
        Traceback (most recent call last):
                ...
	ValueError: cannot convert float NaN to integer
